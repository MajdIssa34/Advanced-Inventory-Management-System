# This first server block is for the Certbot challenge and to redirect HTTP to HTTPS
server {
    listen 80;
    server_name api.invms.xyz auth.invms.xyz eureka.invms.xyz;

    location ~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# This is the main server block for your application
server {
    listen 443 ssl;
    server_name api.invms.xyz;

    ssl_certificate /etc/letsencrypt/live/api.invms.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.invms.xyz/privkey.pem;

    # === NEW SECTION FOR THE BACKEND API ===
    # Any request starting with /api/ will be sent to your Spring API Gateway.
    location /api/ {
        resolver 127.0.0.11 valid=30s;

        # This rule removes the '/api' prefix before forwarding the request.
        # So, a request to /api/developer/keys becomes /developer/keys for the gateway.
        rewrite /api/(.*) /$1 break;

        proxy_pass http://api-gateway:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # === NEW SECTION FOR THE FLUTTER FRONTEND ===
    # Any other request will serve your Flutter application files.
    location / {
        # This should match the volume mount you will add to docker-compose.yml
        root /usr/share/nginx/html;

        # This is critical for Single-Page Applications like Flutter.
        # It ensures that refreshing the browser on any page (e.g., /developer/keys)
        # still serves the main index.html file, allowing the Flutter router to work.
        try_files $uri $uri/ /index.html;
    }
}

# Keycloak (HTTPS) - NO CHANGES NEEDED
server {
    listen 443 ssl;
    server_name auth.invms.xyz;

    ssl_certificate /etc/letsencrypt/live/api.invms.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.invms.xyz/privkey.pem;

    location / {
        resolver 127.0.0.11 valid=30s;
        # This uses the network alias we created for stability
        proxy_pass http://keycloak-host:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Eureka Discovery Server (HTTPS) - NO CHANGES NEEDED
server {
    listen 443 ssl;
    server_name eureka.invms.xyz;

    ssl_certificate /etc/letsencrypt/live/api.invms.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.invms.xyz/privkey.pem;

    location / {
        resolver 127.0.0.11 valid=30s;
        proxy_pass http://discovery-server:8761;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}