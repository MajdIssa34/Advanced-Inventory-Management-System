services:
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: ptechie
      POSTGRES_PASSWORD: password
    volumes:
      - ./postgres-order:/data/postgres
    ports:
      - "5431:5432"
    restart: unless-stopped
    networks:
      - invms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ptechie -d order-service"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: ptechie
      POSTGRES_PASSWORD: password
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always
    networks:
      - invms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ptechie -d inventory-service"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-developer:
    container_name: postgres-developer
    image: postgres
    environment:
      POSTGRES_DB: developer-service
      POSTGRES_USER: ptechie
      POSTGRES_PASSWORD: password
    volumes:
      - ./postgres-developer:/data/postgres
    ports:
      - "5433:5432"
    restart: always
    networks:
      - invms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ptechie -d developer-service"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    restart: always
    networks:
      - invms_network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: start-dev
    environment:
      KC_DB: mysql
      KC_DB_URL_HOST: keycloak-mysql
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY: edge
      KC_HOSTNAME: auth.invms.xyz
    volumes:
      - ./keycloak_data:/opt/keycloak/data
    depends_on:
      keycloak-mysql:
        condition: service_healthy
    restart: always
    networks:
      invms_network:
        aliases:
          - keycloak-host
    # ADD THIS HEALTHCHECK TO KEYCLOAK
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  discovery-server:
    image: majdissa34/discovery-server:latest
    container_name: discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=eureka
      - EUREKA_PASSWORD=password
    restart: always
    networks:
      - invms_network

  api-gateway:
    image: majdissa34/api-gateway:latest
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=eureka
      - EUREKA_PASSWORD=password
    depends_on:
      discovery-server:
        condition: service_started # Basic check is fine for Eureka
    restart: always
    networks:
      - invms_network

  # All your other services (product, order, inventory, developer)
  # should also depend on their databases being healthy.
  # I've added this for order-service as an example.
  order-service:
    # ...
    depends_on:
      postgres-order:
        condition: service_healthy
      discovery-server:
        condition: service_started
    # ...
    networks:
      - invms_network

  # Apply similar depends_on to inventory-service and developer-service
  inventory-service:
    #...
    depends_on:
      postgres-inventory:
        condition: service_healthy
      discovery-server:
        condition: service_started
    #...
    networks:
      - invms_network

  developer-service:
    #...
    depends_on:
      postgres-developer:
        condition: service_healthy
      discovery-server:
        condition: service_started
    #...
    networks:
      - invms_network

  product-service:
    #...
    depends_on:
      - discovery-server
    #...
    networks:
      - invms_network


  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./frontend:/usr/share/nginx/html
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    # MODIFY THIS depends_on block FOR NGINX
    depends_on:
      keycloak:
        condition: service_healthy
      api-gateway:
        condition: service_started
    restart: always
    networks:
      - invms_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - invms_network

networks:
  invms_network:
    driver: bridge